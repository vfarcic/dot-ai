name: CI Pipeline, Security & Publish

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

permissions:
  actions: read
  contents: write
  security-events: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Create mock kubeconfig for tests
      run: |
        cat > kubeconfig.yaml << 'EOF'
        apiVersion: v1
        kind: Config
        clusters:
        - cluster:
            server: https://test-cluster.example.com
          name: test-cluster
        contexts:
        - context:
            cluster: test-cluster
            user: test-user
          name: test-context
        current-context: test-context
        users:
        - name: test-user
          user:
            token: fake-token
        EOF
    
    - name: Run linter
      run: npm run lint
    
    - name: Build project
      run: npm run build
    
    - name: Run tests
      run: npm test -- --verbose

  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: typescript
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Run dependency security audit
      run: npm audit --audit-level moderate
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  publish:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Auto-increment version and check for changes
      id: version-check
      run: |
        PUBLISHED_VERSION=$(npm view @vfarcic/dot-ai version 2>/dev/null || echo "0.0.0")
        echo "published-version=$PUBLISHED_VERSION" >> $GITHUB_OUTPUT
        
        # Parse published version and increment minor version
        MAJOR=$(echo $PUBLISHED_VERSION | cut -d. -f1)
        MINOR=$(echo $PUBLISHED_VERSION | cut -d. -f2)
        PATCH=$(echo $PUBLISHED_VERSION | cut -d. -f3)
        
        # Increment minor version, reset patch to 0
        NEW_MINOR=$((MINOR + 1))
        NEW_VERSION="$MAJOR.$NEW_MINOR.0"
        
        # Update package.json with new version
        npm version $NEW_VERSION --no-git-tag-version
        
        echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "Version incremented from $PUBLISHED_VERSION to $NEW_VERSION"
        echo "version-changed=true" >> $GITHUB_OUTPUT
    
    - name: Publish to npm
      if: steps.version-check.outputs.version-changed == 'true'
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Commit version bump and create Git tag
      if: steps.version-check.outputs.version-changed == 'true'
      run: |
        VERSION=${{ steps.version-check.outputs.new-version }}
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json
        git commit -m "chore: bump version to $VERSION [skip ci]"
        git tag -a "v$VERSION" -m "Release version $VERSION"
        git push origin main
        git push origin "v$VERSION"
    
    - name: Generate release notes
      if: steps.version-check.outputs.version-changed == 'true'
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "# Release v$VERSION" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## Changes" >> RELEASE_NOTES.md
        git log --oneline $(git describe --tags --abbrev=0 HEAD~1)..HEAD >> RELEASE_NOTES.md 2>/dev/null || echo "Initial release" >> RELEASE_NOTES.md
    
    - name: Create GitHub Release
      if: steps.version-check.outputs.version-changed == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version-check.outputs.new-version }}
        release_name: Release v${{ steps.version-check.outputs.new-version }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false