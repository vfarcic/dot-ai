name: CI Pipeline, Security & Publish

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

permissions:
  actions: read
  contents: write
  security-events: write
  id-token: write
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Create mock kubeconfig for tests
      run: |
        cat > kubeconfig.yaml << 'EOF'
        apiVersion: v1
        kind: Config
        clusters:
        - cluster:
            server: https://test-cluster.example.com
          name: test-cluster
        contexts:
        - context:
            cluster: test-cluster
            user: test-user
          name: test-context
        current-context: test-context
        users:
        - name: test-user
          user:
            token: fake-token
        EOF
    
    - name: Run linter
      run: npm run lint
    
    - name: Build project
      run: npm run build
    
    - name: Run tests
      run: npm test -- --verbose

  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: typescript
        
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Run dependency security audit
      run: npm audit --audit-level moderate
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  version:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      new-version: ${{ steps.version-check.outputs.new-version }}
      version-changed: ${{ steps.version-check.outputs.version-changed }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Pull latest changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git pull origin main
    
    - name: Calculate next version
      id: version-check
      run: |
        PUBLISHED_VERSION=$(npm view @vfarcic/dot-ai version 2>/dev/null || echo "0.0.0")
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "published-version=$PUBLISHED_VERSION" >> $GITHUB_OUTPUT
        echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # Check if current version is newer than published version
        if [ "$CURRENT_VERSION" != "$PUBLISHED_VERSION" ]; then
          echo "new-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Version will be published: $CURRENT_VERSION (currently published: $PUBLISHED_VERSION)"
          echo "version-changed=true" >> $GITHUB_OUTPUT
        else
          # Parse published version and increment minor version
          MAJOR=$(echo $PUBLISHED_VERSION | cut -d. -f1)
          MINOR=$(echo $PUBLISHED_VERSION | cut -d. -f2)
          PATCH=$(echo $PUBLISHED_VERSION | cut -d. -f3)
          
          # Increment minor version, reset patch to 0
          NEW_MINOR=$((MINOR + 1))
          NEW_VERSION="$MAJOR.$NEW_MINOR.0"
          
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Version will be incremented from $PUBLISHED_VERSION to $NEW_VERSION"
          echo "version-changed=true" >> $GITHUB_OUTPUT
        fi

  docker:
    needs: [version, publish]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.version.outputs.version-changed == 'true'
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Pull latest changes
      run: git pull origin main
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        build-args: |
          PACKAGE_VERSION=${{ needs.version.outputs.new-version }}
        tags: |
          ghcr.io/vfarcic/dot-ai:${{ needs.version.outputs.new-version }}
          ghcr.io/vfarcic/dot-ai:latest
        labels: |
          org.opencontainers.image.source=https://github.com/vfarcic/dot-ai
          org.opencontainers.image.description=AI-powered development productivity platform that enhances software development workflows through intelligent automation and AI-driven assistance
          org.opencontainers.image.licenses=MIT
          org.opencontainers.image.version=${{ needs.version.outputs.new-version }}
        platforms: linux/amd64,linux/arm64

  publish:
    needs: [version]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.version.outputs.version-changed == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Pull latest changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git pull origin main
    
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Update package.json version if needed
      run: |
        VERSION=${{ needs.version.outputs.new-version }}
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        
        if [ "$CURRENT_VERSION" != "$VERSION" ]; then
          echo "Updating package.json from $CURRENT_VERSION to $VERSION"
          npm version $VERSION --no-git-tag-version
        else
          echo "Package.json already at correct version: $VERSION"
        fi
    
    - name: Publish to npm
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Commit version bump and create Git tag
      run: |
        VERSION=${{ needs.version.outputs.new-version }}
        git add package.json
        git commit -m "chore: bump version to $VERSION [skip ci]"
        git tag -a "v$VERSION" -m "Release version $VERSION"
        git push origin main
        git push origin "v$VERSION"
    
    - name: Generate release notes
      run: |
        VERSION=${{ needs.version.outputs.new-version }}
        echo "# Release v$VERSION" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## Changes" >> RELEASE_NOTES.md
        git log --oneline $(git describe --tags --abbrev=0 HEAD~1)..HEAD >> RELEASE_NOTES.md 2>/dev/null || echo "Initial release" >> RELEASE_NOTES.md
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.version.outputs.new-version }}
        release_name: Release v${{ needs.version.outputs.new-version }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false