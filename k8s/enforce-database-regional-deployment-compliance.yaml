# MANDATORY SCHEMA-BY-SCHEMA ANALYSIS
#
# databaseinstances.sql.gcp.m.upbound.io: HAS spec.forProvider.region + GCP provider → MUST generate rule
# databases.sql.gcp.m.upbound.io: NO region field (depends on instance) → Can skip
# globalclusters.rds.aws.m.upbound.io: HAS spec.forProvider.region + AWS provider → MUST generate rule  
# clusters.rds.aws.m.upbound.io: HAS spec.forProvider.region + AWS provider → MUST generate rule
# users.sql.gcp.m.upbound.io: NO region field (depends on instance) → Can skip
# instances.rds.aws.m.upbound.io: HAS spec.forProvider.region + AWS provider → MUST generate rule
# sqls.devopstoolkit.live: HAS spec.region + multi-cloud → MUST generate rule
# servers.dbforpostgresql.azure.m.upbound.io: HAS spec.forProvider.location + Azure provider → MUST generate rule
# clusterinstances.rds.aws.m.upbound.io: HAS spec.forProvider.region + AWS provider → MUST generate rule
# databases.dbforpostgresql.azure.m.upbound.io: NO region field (depends on server) → Can skip
# sslcerts.sql.gcp.m.upbound.io: NO region field (depends on instance) → Can skip
# manageddatabaselogicaldatabases.database.upcloud.com: NO region field + UpCloud only → Can skip
# flexibleservers.dbforpostgresql.azure.m.upbound.io: HAS spec.forProvider.location + Azure provider → MUST generate rule
# manageddatabasepostgresqls.database.upcloud.com: HAS spec.forProvider.zone + UpCloud only → Can skip
# flexibleserverdatabases.dbforpostgresql.azure.m.upbound.io: NO region field (depends on server) → Can skip
# optiongroups.rds.aws.m.upbound.io: HAS spec.forProvider.region + AWS provider → MUST generate rule
# manageddatabaseredis.database.upcloud.com: HAS spec.forProvider.zone + UpCloud only → Can skip
# parametergroups.rds.aws.m.upbound.io: HAS spec.forProvider.region + AWS provider → MUST generate rule
# dbsnapshotcopies.rds.aws.m.upbound.io: HAS spec.forProvider.region + AWS provider → MUST generate rule
# manageddatabasemysqls.database.upcloud.com: HAS spec.forProvider.zone + UpCloud only → Can skip
# manageddatabaseopensearches.database.upcloud.com: HAS spec.forProvider.zone + UpCloud only → Can skip
# subnetgroups.rds.aws.m.upbound.io: HAS spec.forProvider.region + AWS provider → MUST generate rule
# clustersnapshots.rds.aws.m.upbound.io: HAS spec.forProvider.region + AWS provider → MUST generate rule
# configurations.dbforpostgresql.azure.m.upbound.io: NO region field (depends on server) → Can skip
# databases.postgresql.sql.crossplane.io: NO region field (PostgreSQL provider) → Can skip
#
# RESOURCES REQUIRING VALIDATION RULES: GCP databases (us-east1), AWS databases (us-east-1), Azure databases (us-east1)
#
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: enforce-database-regional-deployment-compliance
  labels:
    policy-intent/id: "4ea21cfc-9af7-4696-a88d-14876e387c73"
  annotations:
    policy-intent/description: "Databases in Google Cloud (GCP) and Azure should always run in the us-east1 region, and those in AWS should run in the us-east-1 region."
    policy-intent/rationale: "Ensures data residency compliance and reduces latency for US-based applications. Running databases in designated US East regions provides optimal performance for primary workloads and meets regulatory requirements for data locality. This policy standardizes regional deployment across cloud providers while maintaining consistency in data placement strategies."
spec:
  validationFailureAction: Enforce
  background: false
  rules:
  - name: enforce-gcp-database-region
    match:
      any:
      - resources:
          kinds:
          - sql.gcp.m.upbound.io/v1beta1/DatabaseInstance
          namespaces:
          - a-team
          - b-team
          operations:
          - CREATE
          - UPDATE
    validate:
      cel:
        expressions:
        - expression: >-
            has(object.spec) && has(object.spec.forProvider) && has(object.spec.forProvider.region) && object.spec.forProvider.region == 'us-east1'
          message: "GCP database instances must be deployed in the us-east1 region for data residency compliance and optimal performance"
        - expression: >-
            !has(object.spec.initProvider) || !has(object.spec.initProvider.region) || object.spec.initProvider.region == 'us-east1'
          message: "GCP database instances initProvider region must be us-east1 when specified"

  - name: enforce-aws-rds-cluster-region
    match:
      any:
      - resources:
          kinds:
          - rds.aws.m.upbound.io/v1beta1/Cluster
          - rds.aws.m.upbound.io/v1beta1/ClusterInstance
          - rds.aws.m.upbound.io/v1beta1/Instance
          namespaces:
          - a-team
          - b-team
          operations:
          - CREATE
          - UPDATE
    validate:
      cel:
        expressions:
        - expression: >-
            has(object.spec) && has(object.spec.forProvider) && has(object.spec.forProvider.region) && object.spec.forProvider.region == 'us-east-1'
          message: "AWS RDS resources must be deployed in the us-east-1 region for data residency compliance and optimal performance"

  - name: enforce-aws-rds-global-cluster-region
    match:
      any:
      - resources:
          kinds:
          - rds.aws.m.upbound.io/v1beta1/GlobalCluster
          - rds.aws.m.upbound.io/v1beta1/OptionGroup
          - rds.aws.m.upbound.io/v1beta1/ParameterGroup
          - rds.aws.m.upbound.io/v1beta1/SubnetGroup
          - rds.aws.m.upbound.io/v1beta1/ClusterSnapshot
          - rds.aws.m.upbound.io/v1beta1/DBSnapshotCopy
          namespaces:
          - a-team
          - b-team
          operations:
          - CREATE
          - UPDATE
    validate:
      cel:
        expressions:
        - expression: >-
            has(object.spec) && has(object.spec.forProvider) && has(object.spec.forProvider.region) && object.spec.forProvider.region == 'us-east-1'
          message: "AWS RDS resources must be deployed in the us-east-1 region for data residency compliance and optimal performance"

  - name: enforce-azure-database-region
    match:
      any:
      - resources:
          kinds:
          - dbforpostgresql.azure.m.upbound.io/v1beta1/Server
          - dbforpostgresql.azure.m.upbound.io/v1beta1/FlexibleServer
          namespaces:
          - a-team
          - b-team
          operations:
          - CREATE
          - UPDATE
    validate:
      cel:
        expressions:
        - expression: >-
            has(object.spec) && has(object.spec.forProvider) && has(object.spec.forProvider.location) && object.spec.forProvider.location == 'us-east1'
          message: "Azure database servers must be deployed in the us-east1 region for data residency compliance and optimal performance"
        - expression: >-
            !has(object.spec.initProvider) || !has(object.spec.initProvider.location) || object.spec.initProvider.location == 'us-east1'
          message: "Azure database servers initProvider location must be us-east1 when specified"

  - name: enforce-multicloud-sql-region
    match:
      any:
      - resources:
          kinds:
          - devopstoolkit.live/v1beta1/SQL
          namespaces:
          - a-team
          - b-team
          operations:
          - CREATE
          - UPDATE
    validate:
      cel:
        expressions:
        - expression: >-
            !has(object.spec) || !has(object.spec.region) || 
            object.spec.region == 'us-east1' || 
            object.spec.region == 'us-east-1'
          message: "Multi-cloud SQL databases must be deployed in designated US East regions (us-east1 for GCP/Azure, us-east-1 for AWS) for data residency compliance and optimal performance"