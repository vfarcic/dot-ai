{"input":{"issue":"Create Kyverno policy: All pods must have resource limits 1760292479511"},"output":"# MANDATORY SCHEMA-BY-SCHEMA ANALYSIS\n#\n# ResourceQuota: HAS spec.hard (resource limits) but namespace-level quotas → Can skip (pod-level intent)\n# LimitRange: HAS spec.limits (default/max limits) but namespace-level defaults → Can skip (pod-level intent)\n# Pod: HAS spec.containers[].resources.limits + Kubernetes-native → MUST generate rule\n# PodDisruptionBudget: NO resource limit fields → Can skip\n# HorizontalPodAutoscaler: NO resource limit fields → Can skip\n# ClusterPolicy: NO resource limit fields → Can skip\n# ReplicationController: HAS spec.template.spec.containers[].resources.limits + Kubernetes-native → MUST generate rule\n# ReplicaSet: HAS spec.template.spec.containers[].resources.limits + Kubernetes-native → MUST generate rule\n# PriorityClass: NO resource limit fields → Can skip\n# Deployment: HAS spec.template.spec.containers[].resources.limits + Kubernetes-native → MUST generate rule\n# Policy: NO resource limit fields → Can skip\n# StatefulSet: HAS spec.template.spec.containers[].resources.limits + Kubernetes-native → MUST generate rule\n# Namespace: NO resource limit fields → Can skip\n# PolicyException: NO resource limit fields → Can skip\n# StorageClass: NO resource limit fields → Can skip\n# CustomResourceDefinition: NO resource limit fields → Can skip\n# NetworkPolicy: NO resource limit fields → Can skip\n# PersistentVolumeClaim: NO resource limit fields → Can skip\n# ServiceAccount: NO resource limit fields → Can skip\n# Node: NO resource limit fields → Can skip\n# ClusterCleanupPolicy: NO resource limit fields → Can skip\n# DaemonSet: HAS spec.template.spec.containers[].resources.limits + Kubernetes-native → MUST generate rule\n# ClusterPolicyReport: NO resource limit fields → Can skip\n# IPAddress: NO resource limit fields → Can skip\n# PersistentVolume: NO resource limit fields → Can skip\n# ImageValidatingPolicy: NO resource limit fields → Can skip\n# ValidatingPolicy: NO resource limit fields → Can skip\n# Service: NO resource limit fields → Can skip\n# MutatingPolicy: NO resource limit fields → Can skip\n# ClusterEphemeralReport: NO resource limit fields → Can skip\n# EphemeralReport: NO resource limit fields → Can skip\n# ConfigMap: NO resource limit fields → Can skip\n# CleanupPolicy: NO resource limit fields → Can skip\n# PolicyException: NO resource limit fields → Can skip\n# ClusterPolicyReport: NO resource limit fields → Can skip\n# Cluster (CNPG): HAS spec.resources.limits + Kubernetes-native → MUST generate rule\n# CronJob: HAS spec.jobTemplate.spec.template.spec.containers[].resources.limits + Kubernetes-native → MUST generate rule\n# DeletingPolicy: NO resource limit fields → Can skip\n# GeneratingPolicy: NO resource limit fields → Can skip\n# ScheduledBackup: NO resource limit fields → Can skip\n#\n# RESOURCES REQUIRING VALIDATION RULES: Pod, ReplicationController, ReplicaSet, Deployment, StatefulSet, DaemonSet, Cluster (CNPG), CronJob\n#\napiVersion: kyverno.io/v1\nkind: ClusterPolicy\nmetadata:\n  name: require-pod-resource-limits-1760292479511\n  labels:\n    policy-intent/id: e096afe9-66fc-47a5-8fcc-c514322bb937\n  annotations:\n    policy-intent/description: \"All pods must have resource limits 1760292479511\"\n    policy-intent/rationale: \"Resource limits prevent pods from consuming excessive CPU and memory, ensuring fair resource allocation across all workloads\"\n    policies.kyverno.io/category: Resource Management\n    policies.kyverno.io/severity: high\n    policies.kyverno.io/description: >-\n      Ensures all pods and pod controllers define resource limits to prevent resource exhaustion\nspec:\n  background: false\n  validationFailureAction: Enforce\n  rules:\n  - name: validate-pod-resource-limits\n    match:\n      any:\n      - resources:\n          kinds:\n          - Pod\n          operations:\n          - CREATE\n          - UPDATE\n    validate:\n      cel:\n        expressions:\n        - expression: >-\n            has(object.spec.containers) &&\n            object.spec.containers.all(container,\n              has(container.resources) &&\n              has(container.resources.limits) &&\n              has(container.resources.limits.cpu) &&\n              has(container.resources.limits.memory)\n            )\n          message: \"All containers must define both CPU and memory resource limits\"\n        - expression: >-\n            !has(object.spec.initContainers) ||\n            object.spec.initContainers.all(container,\n              has(container.resources) &&\n              has(container.resources.limits) &&\n              has(container.resources.limits.cpu) &&\n              has(container.resources.limits.memory)\n            )\n          message: \"All init containers must define both CPU and memory resource limits\"\n        - expression: >-\n            !has(object.spec.ephemeralContainers) ||\n            object.spec.ephemeralContainers.all(container,\n              has(container.resources) &&\n              has(container.resources.limits) &&\n              has(container.resources.limits.cpu) &&\n              has(container.resources.limits.memory)\n            )\n          message: \"All ephemeral containers must define both CPU and memory resource limits\"\n\n  - name: validate-deployment-resource-limits\n    match:\n      any:\n      - resources:\n          kinds:\n          - apps/v1/Deployment\n          operations:\n          - CREATE\n          - UPDATE\n    validate:\n      cel:\n        expressions:\n        - expression: >-\n            has(object.spec.template.spec.containers) &&\n            object.spec.template.spec.containers.all(container,\n              has(container.resources) &&\n              has(container.resources.limits) &&\n              has(container.resources.limits.cpu) &&\n              has(container.resources.limits.memory)\n            )\n          message: \"All containers in Deployment must define both CPU and memory resource limits\"\n        - expression: >-\n            !has(object.spec.template.spec.initContainers) ||\n            object.spec.template.spec.initContainers.all(container,\n              has(container.resources) &&\n              has(container.resources.limits) &&\n              has(container.resources.limits.cpu) &&\n              has(container.resources.limits.memory)\n            )\n          message: \"All init containers in Deployment must define both CPU and memory resource limits\"\n\n  - name: validate-replicaset-resource-limits\n    match:\n      any:\n      - resources:\n          kinds:\n          - apps/v1/ReplicaSet\n          operations:\n          - CREATE\n          - UPDATE\n    validate:\n      cel:\n        expressions:\n        - expression: >-\n            has(object.spec.template.spec.containers) &&\n            object.spec.template.spec.containers.all(container,\n              has(container.resources) &&\n              has(container.resources.limits) &&\n              has(container.resources.limits.cpu) &&\n              has(container.resources.limits.memory)\n            )\n          message: \"All containers in ReplicaSet must define both CPU and memory resource limits\"\n        - expression: >-\n            !has(object.spec.template.spec.initContainers) ||\n            object.spec.template.spec.initContainers.all(container,\n              has(container.resources) &&\n              has(container.resources.limits) &&\n              has(container.resources.limits.cpu) &&\n              has(container.resources.limits.memory)\n            )\n          message: \"All init containers in ReplicaSet must define both CPU and memory resource limits\"\n\n  - name: validate-statefulset-resource-limits\n    match:\n      any:\n      - resources:\n          kinds:\n          - apps/v1/StatefulSet\n          operations:\n          - CREATE\n          - UPDATE\n    validate:\n      cel:\n        expressions:\n        - expression: >-\n            has(object.spec.template.spec.containers) &&\n            object.spec.template.spec.containers.all(container,\n              has(container.resources) &&\n              has(container.resources.limits) &&\n              has(container.resources.limits.cpu) &&\n              has(container.resources.limits.memory)\n            )\n          message: \"All containers in StatefulSet must define both CPU and memory resource limits\"\n        - expression: >-\n            !has(object.spec.template.spec.initContainers) ||\n            object.spec.template.spec.initContainers.all(container,\n              has(container.resources) &&\n              has(container.resources.limits) &&\n              has(container.resources.limits.cpu) &&\n              has(container.resources.limits.memory)\n            )\n          message: \"All init containers in StatefulSet must define both CPU and memory resource limits\"\n\n  - name: validate-daemonset-resource-limits\n    match:\n      any:\n      - resources:\n          kinds:\n          - apps/v1/DaemonSet\n          operations:\n          - CREATE\n          - UPDATE\n    validate:\n      cel:\n        expressions:\n        - expression: >-\n            has(object.spec.template.spec.containers) &&\n            object.spec.template.spec.containers.all(container,\n              has(container.resources) &&\n              has(container.resources.limits) &&\n              has(container.resources.limits.cpu) &&\n              has(container.resources.limits.memory)\n            )\n          message: \"All containers in DaemonSet must define both CPU and memory resource limits\"\n        - expression: >-\n            !has(object.spec.template.spec.initContainers) ||\n            object.spec.template.spec.initContainers.all(container,\n              has(container.resources) &&\n              has(container.resources.limits) &&\n              has(container.resources.limits.cpu) &&\n              has(container.resources.limits.memory)\n            )\n          message: \"All init containers in DaemonSet must define both CPU and memory resource limits\"\n\n  - name: validate-replicationcontroller-resource-limits\n    match:\n      any:\n      - resources:\n          kinds:\n          - ReplicationController\n          operations:\n          - CREATE\n          - UPDATE\n    validate:\n      cel:\n        expressions:\n        - expression: >-\n            has(object.spec.template.spec.containers) &&\n            object.spec.template.spec.containers.all(container,\n              has(container.resources) &&\n              has(container.resources.limits) &&\n              has(container.resources.limits.cpu) &&\n              has(container.resources.limits.memory)\n            )\n          message: \"All containers in ReplicationController must define both CPU and memory resource limits\"\n        - expression: >-\n            !has(object.spec.template.spec.initContainers) ||\n            object.spec.template.spec.initContainers.all(container,\n              has(container.resources) &&\n              has(container.resources.limits) &&\n              has(container.resources.limits.cpu) &&\n              has(container.resources.limits.memory)\n            )\n          message: \"All init containers in ReplicationController must define both CPU and memory resource limits\"\n\n  - name: validate-cronjob-resource-limits\n    match:\n      any:\n      - resources:\n          kinds:\n          - batch/v1/CronJob\n          operations:\n          - CREATE\n          - UPDATE\n    validate:\n      cel:\n        expressions:\n        - expression: >-\n            has(object.spec.jobTemplate.spec.template.spec.containers) &&\n            object.spec.jobTemplate.spec.template.spec.containers.all(container,\n              has(container.resources) &&\n              has(container.resources.limits) &&\n              has(container.resources.limits.cpu) &&\n              has(container.resources.limits.memory)\n            )\n          message: \"All containers in CronJob must define both CPU and memory resource limits\"\n        - expression: >-\n            !has(object.spec.jobTemplate.spec.template.spec.initContainers) ||\n            object.spec.jobTemplate.spec.template.spec.initContainers.all(container,\n              has(container.resources) &&\n              has(container.resources.limits) &&\n              has(container.resources.limits.cpu) &&\n              has(container.resources.limits.memory)\n            )\n          message: \"All init containers in CronJob must define both CPU and memory resource limits\"\n\n  - name: validate-cnpg-cluster-resource-limits\n    match:\n      any:\n      - resources:\n          kinds:\n          - postgresql.cnpg.io/v1/Cluster\n          operations:\n          - CREATE\n          - UPDATE\n    validate:\n      cel:\n        expressions:\n        - expression: >-\n            !has(object.spec.resources) ||\n            (has(object.spec.resources.limits) &&\n             has(object.spec.resources.limits.cpu) &&\n             has(object.spec.resources.limits.memory))\n          message: \"PostgreSQL Cluster must define both CPU and memory resource limits when resources are specified\"","performance":{"duration_ms":37833,"input_tokens":179224,"output_tokens":3242,"total_tokens":182466,"sdk":"vercel","model_version":"claude-sonnet-4-5-20250929","iterations":1,"tool_calls_executed":0,"cache_read_tokens":0,"cache_creation_tokens":0},"metadata":{"timestamp":"2025-10-12T18:08:45.729Z","complexity":"medium","tags":["troubleshooting"],"source":"integration_test","tool":"policy","test_scenario":"policy-kyverno-generation","failure_analysis":""}}
