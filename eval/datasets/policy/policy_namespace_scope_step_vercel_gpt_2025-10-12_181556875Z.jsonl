{"input":{"issue":"Create Kyverno policy: All pods must have resource limits 1760292718105"},"output":"# MANDATORY SCHEMA-BY-SCHEMA ANALYSIS\n#\n# ResourceQuota v1: NO per-pod/container resources fields → Can skip\n# LimitRange v1: Defines defaults/limits at namespace level, not pod spec enforcement → Can skip\n# Pod v1: HAS spec.containers[].resources.limits and spec.initContainers[].resources.limits → MUST generate rule\n# PodDisruptionBudget policy/v1: NO container spec → Can skip\n# HorizontalPodAutoscaler autoscaling/v2: NO container spec → Can skip\n# ClusterPolicy kyverno.io/v1: Kyverno policy object, not a workload → Can skip\n# ReplicationController v1: HAS spec.template.spec.containers[].resources.limits → MUST generate rule\n# PriorityClass scheduling.k8s.io/v1: NO container spec → Can skip\n# ReplicaSet apps/v1: HAS spec.template.spec.containers[].resources.limits → MUST generate rule\n# Deployment apps/v1: HAS spec.template.spec.containers[].resources.limits → MUST generate rule\n# Policy kyverno.io/v1: Kyverno namespaced policy object, not a workload → Can skip\n# StatefulSet apps/v1: HAS spec.template.spec.containers[].resources.limits → MUST generate rule\n# PolicyException kyverno.io/v2: Exception object, not a workload → Can skip\n# Namespace v1: NO container spec → Can skip\n# StorageClass storage.k8s.io/v1: NO container spec → Can skip\n# CustomResourceDefinition apiextensions.k8s.io/v1: NO container spec → Can skip\n# NetworkPolicy networking.k8s.io/v1: NO container spec → Can skip\n# PersistentVolumeClaim v1: NO container spec → Can skip\n# ServiceAccount v1: NO container spec → Can skip\n# Node v1: NO container spec → Can skip\n# ClusterCleanupPolicy kyverno.io/v2: Cleanup policy object, not a workload → Can skip\n# DaemonSet apps/v1: HAS spec.template.spec.containers[].resources.limits → MUST generate rule\n# ClusterPolicyReport wgpolicyk8s.io/v1alpha2: Reporting object, not a workload → Can skip\n# IPAddress networking.k8s.io/v1: NO container spec → Can skip\n# PersistentVolume v1: NO container spec → Can skip\n# ImageValidatingPolicy policies.kyverno.io/v1alpha1: Not a workload → Can skip\n# ValidatingPolicy policies.kyverno.io/v1alpha1: Not a workload → Can skip\n# MutatingPolicy policies.kyverno.io/v1alpha1: Not a workload → Can skip\n# PolicyReport wgpolicyk8s.io/v1alpha2: Reporting object, not a workload → Can skip\n# Service v1: NO container spec → Can skip\n# clustercleanuppolicies.kyverno.io v2: Duplicate of cleanup policy CRD, not a workload → Can skip\n# policyreports.wgpolicyk8s.io v1alpha2: Duplicate reporting CRD, not a workload → Can skip\n# Cluster postgresql.cnpg.io/v1: HAS spec.resources but not a Pod/PodTemplate; not standard container list → Can skip (policy targets pod-level limits)\n# mutatingpolicies.policies.kyverno.io v1alpha1: Duplicate of MutatingPolicy, not a workload → Can skip\n# ClusterEphemeralReport reports.kyverno.io/v1: Reporting object → Can skip\n# validatingpolicies.policies.kyverno.io v1alpha1: Duplicate of ValidatingPolicy, not a workload → Can skip\n# CleanupPolicy kyverno.io/v2: Cleanup policy object, not a workload → Can skip\n# ConfigMap v1: NO container spec → Can skip\n# PolicyException kyverno.io/v2 (duplicate listing): Not a workload → Can skip\n# EphemeralReport reports.kyverno.io/v1: Reporting object → Can skip\n# cleanuppolicies.kyverno.io v2: Duplicate of CleanupPolicy, not a workload → Can skip\n# GeneratingPolicy policies.kyverno.io/v1alpha1: Not a workload → Can skip\n# ClusterPolicyReport wgpolicyk8s.io/v1alpha2 (duplicate): Reporting object → Can skip\n# CronJob batch/v1: HAS spec.jobTemplate.spec.template.spec.containers[].resources.limits → MUST generate rule\n# DeletingPolicy policies.kyverno.io/v1alpha1: Not a workload → Can skip\n# policyexceptions.policies.kyverno.io v1alpha1: Not a workload → Can skip\n# imagevalidatingpolicies.policies.kyverno.io v1alpha1 (duplicate): Not a workload → Can skip\n# ScheduledBackup postgresql.cnpg.io/v1: Backup CR, no pod template fields to validate directly → Can skip\n# DeletingPolicy policies.kyverno.io/v1alpha1 (duplicate): Not a workload → Can skip\n#\n# RESOURCES REQUIRING VALIDATION RULES: Pod, apps/v1/Deployment, apps/v1/ReplicaSet, apps/v1/StatefulSet, apps/v1/DaemonSet, ReplicationController, batch/v1/CronJob\napiVersion: kyverno.io/v1\nkind: ClusterPolicy\nmetadata:\n  name: require-pod-resource-limits\n  labels:\n    policy-intent/id: 2c0d1349-e9bb-4a7a-b2b8-33634ed8324e\n  annotations:\n    policy-intent/description: \"All pods must have resource limits 1760292718105\"\n    policy-intent/rationale: \"Resource limits prevent pods from consuming excessive CPU and memory, ensuring fair resource allocation across all workloads\"\nspec:\n  background: false\n  validationFailureAction: Enforce\n  rules:\n  - name: require-limits-on-pod\n    match:\n      any:\n      - resources:\n          kinds:\n          - Pod\n          operations:\n          - CREATE\n          - UPDATE\n    validate:\n      message: \"All pods must define resource limits for every container (including init and ephemeral containers).\"\n      cel:\n        expressions:\n        - expression: >-\n            has(object.spec) &&\n            has(object.spec.containers) &&\n            object.spec.containers.all(c,\n              has(c.resources) &&\n              has(c.resources.limits) &&\n              c.resources.limits.size() > 0\n            ) &&\n            (\n              !has(object.spec.initContainers) ||\n              object.spec.initContainers.all(ic,\n                has(ic.resources) &&\n                has(ic.resources.limits) &&\n                ic.resources.limits.size() > 0\n              )\n            ) &&\n            (\n              !has(object.spec.ephemeralContainers) ||\n              object.spec.ephemeralContainers.all(ec,\n                has(ec.resources) &&\n                has(ec.resources.limits) &&\n                ec.resources.limits.size() > 0\n              )\n            )\n  - name: require-limits-on-controllers\n    match:\n      any:\n      - resources:\n          kinds:\n          - apps/v1/Deployment\n          - apps/v1/ReplicaSet\n          - apps/v1/StatefulSet\n          - apps/v1/DaemonSet\n          - ReplicationController\n          operations:\n          - CREATE\n          - UPDATE\n    validate:\n      message: \"Workload controllers must define resource limits for every container (including init and ephemeral containers) in the pod template.\"\n      cel:\n        expressions:\n        - expression: >-\n            has(object.spec) &&\n            has(object.spec.template) &&\n            has(object.spec.template.spec) &&\n            has(object.spec.template.spec.containers) &&\n            object.spec.template.spec.containers.all(c,\n              has(c.resources) &&\n              has(c.resources.limits) &&\n              c.resources.limits.size() > 0\n            ) &&\n            (\n              !has(object.spec.template.spec.initContainers) ||\n              object.spec.template.spec.initContainers.all(ic,\n                has(ic.resources) &&\n                has(ic.resources.limits) &&\n                ic.resources.limits.size() > 0\n              )\n            ) &&\n            (\n              !has(object.spec.template.spec.ephemeralContainers) ||\n              object.spec.template.spec.ephemeralContainers.all(ec,\n                has(ec.resources) &&\n                has(ec.resources.limits) &&\n                ec.resources.limits.size() > 0\n              )\n            )\n  - name: require-limits-on-cronjob\n    match:\n      any:\n      - resources:\n          kinds:\n          - batch/v1/CronJob\n          operations:\n          - CREATE\n          - UPDATE\n    validate:\n      message: \"CronJobs must define resource limits for every container (including init containers) in the job's pod template.\"\n      cel:\n        expressions:\n        - expression: >-\n            has(object.spec) &&\n            has(object.spec.jobTemplate) &&\n            has(object.spec.jobTemplate.spec) &&\n            has(object.spec.jobTemplate.spec.template) &&\n            has(object.spec.jobTemplate.spec.template.spec) &&\n            has(object.spec.jobTemplate.spec.template.spec.containers) &&\n            object.spec.jobTemplate.spec.template.spec.containers.all(c,\n              has(c.resources) &&\n              has(c.resources.limits) &&\n              c.resources.limits.size() > 0\n            ) &&\n            (\n              !has(object.spec.jobTemplate.spec.template.spec.initContainers) ||\n              object.spec.jobTemplate.spec.template.spec.initContainers.all(ic,\n                has(ic.resources) &&\n                has(ic.resources.limits) &&\n                ic.resources.limits.size() > 0\n              )\n            )","performance":{"duration_ms":181559,"input_tokens":134128,"output_tokens":5823,"total_tokens":139951,"sdk":"vercel","model_version":"gpt-5","iterations":1,"tool_calls_executed":0,"cache_read_tokens":0,"cache_creation_tokens":0},"metadata":{"timestamp":"2025-10-12T18:15:56.875Z","complexity":"medium","tags":["troubleshooting"],"source":"integration_test","tool":"policy","test_scenario":"policy-kyverno-generation","failure_analysis":""}}
